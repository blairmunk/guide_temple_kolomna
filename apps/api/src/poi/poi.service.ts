import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { POI } from './poi.entity';

@Injectable()
export class POIService implements OnModuleInit {
  constructor(
    @InjectRepository(POI)
    private poiRepository: Repository<POI>,
  ) {}

  async onModuleInit() {
    // –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try {
      const count = await this.poiRepository.count();
      if (count === 0) {
        console.log('üå± –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ POI...');
        
        const testPois = [
          this.poiRepository.create({
            slug: 'troitskiy-temple',
            title: { ru: '–¢—Ä–æ–∏—Ü–∫–∏–π —Ö—Ä–∞–º', en: 'Trinity Church' },
            summary: { 
              ru: '–ì–ª–∞–≤–Ω—ã–π —Ö—Ä–∞–º –ø—Ä–∏—Ö–æ–¥–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ XIX –≤–µ–∫–µ',
              en: 'Main parish church built in the 19th century'
            },
            body: { 
              ru: '–¢—Ä–æ–∏—Ü–∫–∏–π —Ö—Ä–∞–º —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–æ–º –¥—É—Ö–æ–≤–Ω–æ–π –∂–∏–∑–Ω–∏ –ø—Ä–∏—Ö–æ–¥–∞. –ü–æ—Å—Ç—Ä–æ–µ–Ω –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —Å—Ç–∏–ª–µ.',
              en: 'Trinity Church is the center of the parish spiritual life. Built in traditional Russian style.'
            },
            lat: 55.066639,
            lng: 38.841417,
            visitTimeMin: 15,
            categories: ['—Ö—Ä–∞–º', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'],
            tags: ['–≥–ª–∞–≤–Ω–æ–µ', '–∏—Å—Ç–æ—Ä–∏—è'],
            accessibility: { mgn: false, stroller: true },
            media: []
          }),
          this.poiRepository.create({
            slug: 'bell-tower',
            title: { ru: '–ö–æ–ª–æ–∫–æ–ª—å–Ω—è', en: 'Bell Tower' },
            summary: { 
              ru: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–ª–æ–∫–æ–ª—å–Ω—è XVIII –≤–µ–∫–∞',
              en: 'Historic bell tower from 18th century'
            },
            lat: 55.066700,
            lng: 38.841500,
            visitTimeMin: 10,
            categories: ['–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'],
            tags: ['–¥–µ—Ç—è–º', '–∑–≤–æ–Ω'],
            accessibility: { mgn: false, stroller: false },
            media: []
          }),
          this.poiRepository.create({
            slug: 'parish-house',
            title: { ru: '–ü—Ä–∏—Ö–æ–¥—Å–∫–æ–π –¥–æ–º', en: 'Parish House' },
            summary: { 
              ru: '–ó–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏–π –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
              en: 'Building for meetings and events'
            },
            lat: 55.066500,
            lng: 38.841300,
            visitTimeMin: 5,
            categories: ['–∑–¥–∞–Ω–∏—è'],
            tags: ['—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ'],
            accessibility: { mgn: true, stroller: true },
            media: []
          }),
          this.poiRepository.create({
            slug: 'holy-spring',
            title: { ru: '–°–≤—è—Ç–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫', en: 'Holy Spring' },
            summary: { 
              ru: '–û—Å–≤—è—â–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ–º–æ–≤–µ–Ω–∏—è',
              en: 'Blessed spring for ablutions'
            },
            lat: 55.066400,
            lng: 38.841600,
            visitTimeMin: 8,
            categories: ['—Å–≤—è—Ç—ã–Ω–∏'],
            tags: ['–≤–æ–¥–∞', '–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ'],
            accessibility: { mgn: false, stroller: true },
            media: []
          }),
          this.poiRepository.create({
            slug: 'cemetery',
            title: { ru: '–ü—Ä–∏—Ö–æ–¥—Å–∫–æ–µ –∫–ª–∞–¥–±–∏—â–µ', en: 'Parish Cemetery' },
            summary: { 
              ru: '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∫–ª–∞–¥–±–∏—â–µ –ø—Ä–∏ —Ö—Ä–∞–º–µ',
              en: 'Historic cemetery at the church'
            },
            lat: 55.066800,
            lng: 38.841200,
            visitTimeMin: 12,
            categories: ['–∏—Å—Ç–æ—Ä–∏—è'],
            tags: ['–ø–∞–º—è—Ç—å', '—Ç–∏—à–∏–Ω–∞'],
            accessibility: { mgn: false, stroller: false },
            media: []
          })
        ];

        await this.poiRepository.save(testPois);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ POI —Å–æ–∑–¥–∞–Ω—ã!');
      } else {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${count} POI –≤ –ë–î`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }

  async findAll(options: {
    lang?: string;
    q?: string;
    tags?: string;
    bbox?: string;
  } = {}) {
    try {
      const query = this.poiRepository.createQueryBuilder('poi');
      
      if (options.q) {
        query.where(
          `poi.title->>'ru' ILIKE :search OR poi.summary->>'ru' ILIKE :search`,
          { search: `%${options.q}%` }
        );
      }
      
      if (options.tags) {
        const tags = options.tags.split(',');
        query.andWhere('poi.tags && :tags', { tags });
      }
      
      if (options.bbox) {
        const [minLng, minLat, maxLng, maxLat] = options.bbox.split(',').map(Number);
        query.andWhere(
          'poi.lat BETWEEN :minLat AND :maxLat AND poi.lng BETWEEN :minLng AND :maxLng',
          { minLat, maxLat, minLng, maxLng }
        );
      }
      
      return await query.orderBy('poi.visitTimeMin', 'ASC').getMany();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è POI:', error.message);
      return [];
    }
  }

  async findOne(slugOrId: string, lang: string = 'ru') {
    try {
      const query = this.poiRepository.createQueryBuilder('poi');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ UUID –∏–ª–∏ slug
      if (slugOrId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
        query.where('poi.id = :id', { id: slugOrId });
      } else {
        query.where('poi.slug = :slug', { slug: slugOrId });
      }
      
      return await query.getOne();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è POI:', error.message);
      return null;
    }
  }
}
